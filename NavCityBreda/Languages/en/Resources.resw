<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cellular" xml:space="preserve">
    <value>Cellular</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Initializing" xml:space="preserve">
    <value>Initializing</value>
  </data>
  <data name="IPAddress" xml:space="preserve">
    <value>IP Address</value>
  </data>
  <data name="Landmark" xml:space="preserve">
    <value>Landmark</value>
  </data>
  <data name="Landmarks" xml:space="preserve">
    <value>Landmarks</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading</value>
  </data>
  <data name="Map" xml:space="preserve">
    <value>Map</value>
  </data>
  <data name="MapTileSource" xml:space="preserve">
    <value>Map tile provider</value>
  </data>
  <data name="NoData" xml:space="preserve">
    <value>No data</value>
  </data>
  <data name="NotAvailable" xml:space="preserve">
    <value>Not available</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>Not initialized</value>
  </data>
  <data name="NotVisited" xml:space="preserve">
    <value>Not visited</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="Route" xml:space="preserve">
    <value>Route</value>
  </data>
  <data name="RouteEnd" xml:space="preserve">
    <value>You have reached your destination</value>
  </data>
  <data name="RouteGoStraight" xml:space="preserve">
    <value>Go straight</value>
  </data>
  <data name="RouteKeepLeft" xml:space="preserve">
    <value>Keep left</value>
  </data>
  <data name="RouteKeepRight" xml:space="preserve">
    <value>Keep right</value>
  </data>
  <data name="RouteLeft" xml:space="preserve">
    <value>Turn left</value>
  </data>
  <data name="RouteNone" xml:space="preserve">
    <value>No new action required</value>
  </data>
  <data name="RouteOn" xml:space="preserve">
    <value>on</value>
  </data>
  <data name="RouteRight" xml:space="preserve">
    <value>Turn right</value>
  </data>
  <data name="RouteSeeMap" xml:space="preserve">
    <value>See the map for details</value>
  </data>
  <data name="RouteStart" xml:space="preserve">
    <value>Follow the route drawn on the map</value>
  </data>
  <data name="RouteTrafficCircleLeft" xml:space="preserve">
    <value>At the roundabout go left</value>
  </data>
  <data name="RouteTrafficCircleRight" xml:space="preserve">
    <value>At the roundabout go right</value>
  </data>
  <data name="RouteUTurn" xml:space="preserve">
    <value>Make a U-turn</value>
  </data>
  <data name="Satellite" xml:space="preserve">
    <value>Satellite</value>
  </data>
  <data name="Searching" xml:space="preserve">
    <value>Searching</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="StartRoute" xml:space="preserve">
    <value>Start route</value>
  </data>
  <data name="StopRoute" xml:space="preserve">
    <value>Stop route</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="Visited" xml:space="preserve">
    <value>Visited</value>
  </data>
  <data name="Waypoint" xml:space="preserve">
    <value>Waypoint</value>
  </data>
  <data name="WiFi" xml:space="preserve">
    <value>WiFi</value>
  </data>
  <data name="RouteIn" xml:space="preserve">
    <value>In</value>
  </data>
  <data name="LandmarkReached" xml:space="preserve">
    <value>You have reached a landmark</value>
  </data>
  <data name="RouteListDescription" xml:space="preserve">
    <value>Tap on a route in de list below to view details</value>
  </data>
  <data name="GPSInfo" xml:space="preserve">
    <value>GPS Information</value>
  </data>
  <data name="HelpItem1Header" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="HelpItem1Text" xml:space="preserve">
    <value>Your position on the map is displayed with the icon on the left</value>
  </data>
  <data name="HelpItem2Header" xml:space="preserve">
    <value>Menu</value>
  </data>
  <data name="HelpItem2Text" xml:space="preserve">
    <value>You can open the menu by tapping on the icon in the upper left of the application. You can also swipe from the left edge of the screen. There are four options in the menu. Map, Route, Help and Settings. These will be discussed in depth later. The information at the bottom of the menu will be explained in the next section.</value>
  </data>
  <data name="HelpItem3Header" xml:space="preserve">
    <value>GPS Information</value>
  </data>
  <data name="HelpItem3Text" xml:space="preserve">
    <value>You can find GPS Information at the bottom of the menu. It exists out of three parts. The first is the status of the GPS connection, for examle "disabled" or "ready". Secondly is the way in which the GPS is connecte, Cellular is the least accurate, Satellite the most. The third part is the accuracy in meters.</value>
  </data>
  <data name="Application" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="ResetConfirmation" xml:space="preserve">
    <value>Are you sure you want to reset the application?</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="BackTwiceText" xml:space="preserve">
    <value>Press back again to exit</value>
  </data>
  <data name="LandmarkListDescription" xml:space="preserve">
    <value>Tap on a landmark in de list below to view details. You can sort the list using the buttons.</value>
  </data>
  <data name="Ascending" xml:space="preserve">
    <value>Ascending</value>
  </data>
  <data name="Descending" xml:space="preserve">
    <value>Descending</value>
  </data>
  <data name="SortOrder" xml:space="preserve">
    <value>Sort Order</value>
  </data>
  <data name="SkipLandmark" xml:space="preserve">
    <value>Skip landmark</value>
  </data>
  <data name="Skipped" xml:space="preserve">
    <value>Skipped</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchResults" xml:space="preserve">
    <value>Search results</value>
  </data>
  <data name="SearchTerm" xml:space="preserve">
    <value>Search term</value>
  </data>
  <data name="SearchResultCount" xml:space="preserve">
    <value>results</value>
  </data>
  <data name="SearchDescription" xml:space="preserve">
    <value>Search in description</value>
  </data>
  <data name="SearchResultDescription" xml:space="preserve">
    <value>In description</value>
  </data>
</root>